import { useState, useEffect, useCallback } from "react";
import axios from "axios";
import { Container, Row, Col, Navbar, Nav, Dropdown, Spinner } from "react-bootstrap";
import { Link } from "react-router-dom";
import EventCard from "../components/Events/EventCard";
import EventFilters from "../components/Events/EventFilters";
import NoEventsPlaceholder from "../components/Events/NoEventsPlaceholder";
import avatar from "../assets/avatar.png";
import logo from "../assets/logo_home.png";
import "../styles/Events.css";
import MainSection from '../components/Locations/mainSection';

export default function EventsPage() {
  const [events, setEvents] = useState([]);
  const [filteredEvents, setFilteredEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
  const fetchEvents = useCallback(async () => {
    try {
      setLoading(true);
      const response = await axios.get("http://localhost:5241/api/event");
      setEvents(response.data);
      setFilteredEvents(response.data);
      setError(null);
    } catch (err) {
      setError(err.message);
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
const handleFilterChange = useCallback((date) => {
  if (!date) {
    setFilteredEvents(events);
    return;
  }
  
  const filtered = events.filter(event => {
    const eventDate = new Date(event.date);
    const filterDate = new Date(date);
    
    return (
      eventDate.getFullYear() === filterDate.getFullYear() &&
      eventDate.getMonth() === filterDate.getMonth() &&
      eventDate.getDate() === filterDate.getDate()
    );
  });
  
  setFilteredEvents(filtered);
}, [events]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchEvents();
  }, [fetchEvents]);

  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ height: "100vh" }}>
        <Spinner animation="border" role="status">
          <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </Spinner>
      </div>
    );
  }

  if (error) {
    return (
      <div className="alert alert-danger m-4">
        –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {error}
      </div>
    );
  }

  return (
    <div className="events-wrapper">
      {/* –ù–∞–≤–±–∞—Ä */}
      <Navbar className="top-navbar px-4 py-2" expand="lg">
        <Navbar.Brand as={Link} to="/" className="d-flex align-items-center gap-2">
          <img src={logo} alt="–õ–æ–≥–æ—Ç–∏–ø" width={170} height={60} />
        </Navbar.Brand>

        <Nav className="d-flex align-items-center gap-4 justify-content-center flex-grow-1">
          <Link to="/events" className="nav-link text-white">–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</Link>
          <Link to="/locations" className="nav-link text-white">–õ–æ–∫–∞—Ü–∏–∏</Link>
          <Link to="/about" className="nav-link text-white">–û –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ</Link>
        </Nav>

        <Dropdown align="end" className="ms-auto">
          <Dropdown.Toggle as="button" id="dropdown-avatar" style={{ cursor: 'pointer', background: 'none', border: 'none', padding: 0 }}>
            <img src={avatar} alt="–ê–≤–∞—Ç–∞—Ä" className="avatar-img" />
          </Dropdown.Toggle>

          <Dropdown.Menu style={{ minWidth: 150 }}>
            <Dropdown.Header className="dropdown-title">–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç</Dropdown.Header>
            <Dropdown.Item as={Link} to="/user-account">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</Dropdown.Item>
            <Dropdown.Item as={Link} to="/admin/dashboard">–†–µ–¥–∞–∫—Ç–æ—Ä</Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </Navbar>

      {/* Hero */}
      <div className="hero">
        <h1>–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</h1>
        <p>–ö–∞–∑–∞–Ω—Å–∫–∞—è —É–ª–∏—Ü–∞, –¥. 1 üìç</p>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <Container fluid className="mt-5">
        <EventFilters onFilterChange={handleFilterChange} />

        {filteredEvents.length > 0 ? (
          <Row className="gy-4">
            {filteredEvents.map((event) => (
              <Col md={6} key={event.id}>
                <EventCard 
                  event={{
                    id: event.id,
                    title: event.title,
                    date: event.date,
                    image: event.image,
                    description: event.description,
                    location: event.location,
                    organizer: event.organizer
                  }}
                />
              </Col>
            ))}
          </Row>
        ) : (
          <NoEventsPlaceholder />
        )}
      </Container>
      <MainSection />
    </div>
  );
}